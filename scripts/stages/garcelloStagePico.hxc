import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.audio.FunkinSound;
import funkin.Conductor;
import funkin.graphics.framebuffer.BitmapDataUtil;
import funkin.graphics.framebuffer.FixedBitmapData;
import funkin.graphics.shaders.OverlayBlend;
import funkin.graphics.shaders.RuntimeRainShader;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import openfl.filters.BlurFilter;
import openfl.filters.ShaderFilter;
import funkin.util.FlxTweenUtil;
import openfl.utils.Assets;
import flixel.addons.display.FlxTiledSprite;
import StringTools;

class GarcelloStagePicoStage extends Stage
{
	var rainShader:RuntimeRainShader = new RuntimeRainShader();
	var rainShaderFilter:ShaderFilter;
    var rainDropTimer:Float = 0;
	var rainDropWait:Float = 6;
	var blurFilter:BlurFilter = new BlurFilter(6, 6);

	// as song goes on, these are used to make the rain more intense throught the song
	// these values are also used for the rain sound effect volume intensity!
	var rainShaderStartIntensity:Float;
	var rainShaderEndIntensity:Float;

   	function new()
	{
		super('garcelloStagePico');
	}
    override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);
		rainShader.scale = FlxG.height / 200; // adjust this value so that the rain looks nice

        FlxG.console.registerObject("rainShader", rainShader);
		switch (PlayState.instance.currentSong.id)
        {
			case "nerves":
				rainShaderStartIntensity = 0.1;
				rainShaderEndIntensity = 0.3;
		}
        rainShader.intensity = rainShaderStartIntensity;
        rainShaderFilter = new ShaderFilter(rainShader);
		FlxG.camera.filters = [rainShaderFilter];
    }
    override function onUpdate(event:UpdateScriptEvent)
	{
		super.onUpdate(event);

		var remappedIntensityValue:Float = FlxMath.remapToRange(Conductor.instance.songPosition, 0, FlxG.sound.music != null ? FlxG.sound.music.length : 0.0, rainShaderStartIntensity, rainShaderEndIntensity);
		rainShader.intensity = remappedIntensityValue;
		rainShader.updateViewInfo(FlxG.width, FlxG.height, FlxG.camera);
		rainShader.update(event.elapsed);
	}
    	override function onGameOver(event:ScriptEvent):Void {
		super.onGameOver(event);
		// Make it so the rain shader doesn't show over the game over screen
		FlxG.camera.filters = [];
	}

	override function onSongRetry(event:ScriptEvent):Void {
		super.onSongRetry(event);
		// Make it so the rain shader doesn't show over the game over screen
		// FlxG.camera.setFilters([rainShaderFilter]);

		resetStageValues();
		FlxG.camera.filters = [rainShaderFilter];
	}
}